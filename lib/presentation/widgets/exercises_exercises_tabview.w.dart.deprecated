import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../domain/state/exercises_store.dart';
import '../theme/colors.t.dart';
import 'shared/lists_empty_feedback.w.dart';

class ExercisesExercisesTabView extends StatefulWidget {
  const ExercisesExercisesTabView({Key key}) : super(key: key);

  @override
  _ExercisesExercisesTabViewState createState() =>
      _ExercisesExercisesTabViewState();
}

class _ExercisesExercisesTabViewState extends State<ExercisesExercisesTabView> {
  TextEditingController _searchTextController;
  String searchString;
  bool showFilters = false;

  ExercisesStore exercisesStore;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    exercisesStore = Provider.of<ExercisesStore>(context);
    // exercisesStore?.clearFilters();
    // exercisesStore?.workout = Provider.of<Workout>(context);
  }

  void _toggleShowFilters() => setState(() => showFilters = !showFilters);

  Widget showFiltersBar() => showFilters ? const Text('Filters') : Container();

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: <Widget>[
          Container(
            height: 60,
            decoration: const BoxDecoration(
                color: AppColors.greyDarkest,
                border: Border(top: BorderSide(color: AppColors.greyDark))),
            child: Row(
              children: <Widget>[
                Expanded(
                  //= Search Bar
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                    child: TextField(
                      cursorColor: AppColors.grey,
                      textAlignVertical: TextAlignVertical.center,
                      controller: _searchTextController,
                      onChanged: exercisesStore.updateSearchString,
                      decoration: searchFieldDecoration,
                      style:
                          const TextStyle(color: AppColors.grey, height: 0.8),
                    ),
                  ),
                ),
                //= Filter Button
                IconButton(
                    icon: Icon(
                      Icons.filter_list,
                      color: showFilters ? AppColors.rudy : AppColors.grey,
                    ),
                    onPressed: _toggleShowFilters)
              ],
            ),
          ),
          //= Exercises List
          exercisesStore.all.isEmpty
              ? const EmptyListFeedback('No exercises found...')
              : Text(
                  'exercises: ${exercisesStore.exercises?.length ?? 'error...'}')
          // ListView.builder(
          //     itemExtent: 90.0,
          //     itemBuilder: (BuildContext context, int index) =>
          //         ExerciseItem(
          //       key: Key('exerciseList:${exercisesStore.all[index].key}'),
          //       exercise: exercisesStore.all[index],
          //     ),
          //     itemCount: exercisesStore.all.length,
          //   )
        ],
      ),
    );
  }
}

const InputDecoration searchFieldDecoration = InputDecoration(
  prefixIcon: Icon(Icons.search),
  enabledBorder: OutlineInputBorder(
      borderRadius: BorderRadius.all(
        Radius.circular(20.0),
      ),
      borderSide: BorderSide(color: AppColors.greyDark)),
  border: OutlineInputBorder(
    borderRadius: BorderRadius.all(
      Radius.circular(20.0),
    ),
  ),
);
