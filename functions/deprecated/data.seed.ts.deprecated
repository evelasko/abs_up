import faker from 'faker'
import { concat, head, pathOr, pipe, tail } from 'ramda'
import { v4 } from 'uuid'

import {
    equipment, exercise_sets, exercises, muscle_groups, PrismaClient, user
} from '@prisma/client'

import { parseData } from './data.parse'

const client = new PrismaClient()
const joinKeyValues = (list: string[][]) => {
    const tableName = head(list)
    const records = tail(list)
    return `
INSERT INTO ${tableName ? tableName : 'table'}
            ('${records[0].join(`', '`)}')
     VALUES ${tail(records).map(v => `('${v.join(`', '`)}')\n           `)};
`}
const splitKeyValues = (list: any[]) => {
    const tableName = head(list)
    const records = tail(list)
    return [tableName].concat([Object.keys(records[0])].concat(records.map(o => Object.values(o))))
}
const buildInsert = pipe(splitKeyValues, joinKeyValues)

const buildQuery = async () => {
    
    // get all model names from the prisma client
    const models: {name: string, isGenerated: boolean}[] = (pathOr([{name: '', isGenerated: true}], ['dmmf', 'datamodel', 'models'])(client))
    const sqlDeleteStatements: string[] = models.map(({ name, isGenerated}) => isGenerated
        ? `-- the model ${name} was generated by prisma`
        : `DELETE FROM ${name};`
    )
    
    // retrieve data from numbers' csv export
    // const { equipment, target, set, exercises } = await parseData()
    const csv = await parseData()

    // create main user
    const user: user[] = [{
        id: v4(),
        email: faker.internet.email(),
        first_name: faker.name.firstName(),
        last_name: faker.name.lastName()
    }]
    
    // create exercise sets
    const exercise_sets: exercise_sets[] = csv.set.map((s: string) => ({
        id: v4(),
        set_name: s,
    }))

    // create equipments
    const equipment: equipment[] = csv.equipment.map((s: string) => ({
        id: v4(),
        name: s
    }))

    // create muscle groups
    const muscle_groups: muscle_groups[] = csv.target.map((s: string) => ({
        id: v4(),
        name: s,
        description: faker.lorem.words(4),
    }))

    // create exercises
    const exercises: exercises[] = csv.exercises.map((ex: any) => ({
        description: faker.lorem.words(4),
        difficulty: ex.difficulty,
        id: ex.id,
        impact: ex.impact,
        name: ex.name,
        sided: ex.sided,
        weighted: ex.weighted,
        equipment: equipment.filter(e => e.name === ex.equipment)[0].id,
        set: exercise_sets.filter(s => s.set_name === ex.set)[0].id,
        target: muscle_groups.filter(m => m.name === ex.target)[0].id
    }))

    const sqlStatement = concat(
         sqlDeleteStatements.join('\n')
        )([
            ['user', ...user], 
            ['exercise_sets', ...exercise_sets], 
            ['equipment', ...equipment], 
            ['muscle_groups', ...muscle_groups],
            ['exercises', ...exercises]
        ].map(r => buildInsert(r)).join('\n'))
    
    return sqlStatement
}

buildQuery()
    .then(async res => { 
        console.log('\n\n\n\n\n\n\n\n', res)
        await client.raw(res)
        console.log('\n\n\n\n\n\n\n\n')
    })
    .then(async res => {
        const ex = await client.exercises.count()
        console.log('Ex count: ', ex)
    })
    .catch(err => console.log('Error while performing raw query: \n\n', err)) 