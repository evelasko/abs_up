const fs = require("fs");
const path = require("path");

const firebase = require("@firebase/testing");

const TEST_FIREBASE_PROJECT_ID = "abs-up-test";
const REAL_FIREBASE_PROJECT_ID = "abs-up";

const seedItems = {
  chocolate: 4.99,
  "coffee beans": 12.99,
  milk: 5.99,
};

const aliceAuth = {
  uid: "alice",
  email: "alice@example.com",
};

before(async () => {
  // Load the content of the "firestore.rules" file into the emulator before running the
  // test suite. This is necessary because we are using a fake Project ID in the tests,
  // so the rules "hot reloading" behavior which works in the Web App does not apply here.
  const rulesContent = fs.readFileSync(
    path.resolve(__dirname, "../../firestore.rules")
  );
  await firebase.loadFirestoreRules({
    projectId: TEST_FIREBASE_PROJECT_ID,
    rules: rulesContent,
  });
});

after(() => {
  firebase.apps().forEach((app) => app.delete());
});

// Unit test the security rules
describe("shopping carts", () => {
  const db = firebase
    .initializeTestApp({
      projectId: TEST_FIREBASE_PROJECT_ID,
      auth: aliceAuth,
    })
    .firestore();

  after(() => {
    // Clear data from the emulator
    firebase.clearFirestoreData({
      projectId: TEST_FIREBASE_PROJECT_ID,
    });
  });

  it("can be created by the cart owner", async () => {
    await firebase.assertSucceeds(
      db.doc("carts/alicesCart").set({
        ownerUID: "alice",
        total: 0,
      })
    );
  });
});

describe("shopping carts", async () => {
  const db = firebase
    .initializeTestApp({
      projectId: TEST_FIREBASE_PROJECT_ID,
      auth: aliceAuth,
    })
    .firestore();

  before(async () => {
    const admin = firebase
      .initializeAdminApp({
        projectId: TEST_FIREBASE_PROJECT_ID,
      })
      .firestore();

    // Create Alice's cart
    await admin.doc("carts/alicesCart").set({
      ownerUID: "alice",
      total: 0,
    });
  });

  after(() => {
    // Clear data from the emulator
    firebase.clearFirestoreData({
      projectId: TEST_FIREBASE_PROJECT_ID,
    });
  });

  it("can be read, updated, and deleted by the cart owner", async () => {
    await firebase.assertSucceeds(db.doc("carts/alicesCart").get());
  });
});

describe("shopping cart items", async () => {
  const db = firebase
    .initializeTestApp({
      projectId: TEST_FIREBASE_PROJECT_ID,
      auth: aliceAuth,
    })
    .firestore();

  before(async () => {
    const admin = firebase
      .initializeAdminApp({
        projectId: TEST_FIREBASE_PROJECT_ID,
      })
      .firestore();

    // Create Alice's cart
    await admin.doc("carts/alicesCart").set({
      ownerUID: "alice",
      total: 0,
    });

    // Create Items Subcollection in Alice's Cart
    const alicesItemsRef = admin.doc("carts/alicesCart").collection("items");
    for (const name of Object.keys(seedItems)) {
      await alicesItemsRef.doc(name).set({
        value: seedItems[name],
      });
    }
  });

  after(() => {
    // Clear data from the emulator
    firebase.clearFirestoreData({
      projectId: TEST_FIREBASE_PROJECT_ID,
    });
  });

  it("can be read by the cart owner", async () => {
    await firebase.assertSucceeds(db.doc("carts/alicesCart/items/milk").get());
  });

  it("can be added by the cart owner", async () => {
    await firebase.assertSucceeds(
      db.doc("carts/alicesCart/items/lemon").set({
        name: "lemon",
        price: 0.99,
      })
    );
  });
});
